import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardContent } from "../components/ui/card";
import { Input } from "../components/ui/input";
import { Button } from "../components/ui/button";
import { Table, TableHeader, TableBody, TableRow, TableCell } from "../components/ui/table"; // —Å–æ–∑–¥–∞–¥–∏–º —ç—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º shadcn

export default function Settings() {
  const [schema, setSchema] = useState([]);
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // üß© –ó–∞–≥–ª—É—à–∫–∞ API ‚Äî –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π fetch('/api/schema')
    // fetch('/api/schema')
    //   .then(res => res.json())
    //   .then(data => setSchema(data))
    //   .finally(() => setLoading(false));

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    setTimeout(() => {
      setSchema([
        { name: "–ò–º—è", type: "string", source: "CRM", lastUpdated: "2025-10-01" },
        { name: "–í–æ–∑—Ä–∞—Å—Ç", type: "number", source: "CRM", lastUpdated: "2025-09-28" },
        { name: "–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫", type: "number", source: "Transaction DB", lastUpdated: "2025-10-15" },
        { name: "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", type: "number", source: "Transaction DB", lastUpdated: "2025-10-18" },
      ]);
      setLoading(false);
    }, 500);
  }, []);

  const filteredSchema = schema.filter((item) =>
    item.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-semibold text-gray-800">Profile Schema Overview</h1>

      <Card className="shadow-sm border-gray-200">
        <CardHeader>
          <h2 className="text-lg font-medium">Attributes</h2>
        </CardHeader>
        <CardContent>
          {/* –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ */}
          <div className="mb-4 flex gap-2">
            <Input
              placeholder="–ü–æ–∏—Å–∫ –∞—Ç—Ä–∏–±—É—Ç–∞..."
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              className="flex-1"
            />
            <Button className="bg-[#FFB800] hover:bg-[#e5a700] text-white">
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </Button>
          </div>

          {/* –¢–∞–±–ª–∏—Ü–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ */}
          {loading ? (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableCell>–ò–º—è</TableCell>
                  <TableCell>–¢–∏–ø</TableCell>
                  <TableCell>–ò—Å—Ç–æ—á–Ω–∏–∫</TableCell>
                  <TableCell>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</TableCell>
                  <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredSchema.map((attr, index) => (
                  <TableRow key={index}>
                    <TableCell>{attr.name}</TableCell>
                    <TableCell>{attr.type}</TableCell>
                    <TableCell>{attr.source}</TableCell>
                    <TableCell>{attr.lastUpdated}</TableCell>
                    <TableCell className="flex gap-2">
                      <Button size="sm" variant="outline">
                        –°–∫—Ä—ã—Ç—å
                      </Button>
                      <Button size="sm" variant="outline">
                        –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                      <Button size="sm" variant="outline">
                        –û–±—ä–µ–¥–∏–Ω–∏—Ç—å
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
