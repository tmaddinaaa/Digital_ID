import React, { useState, useEffect } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "../components/ui/tabs";
import { RefreshCw, Search } from "lucide-react";

import { overviewData } from "../data/analytics/overviewData";
import { seasonalityData } from "../data/analytics/seasonalityData";
import { behaviorData } from "../data/analytics/behaviorData";
import { pushData } from "../data/analytics/pushData";
import { relationsData } from "../data/analytics/relationsData";

import SectionOverview from "./sections/SectionOverview";
import SectionSeasonality from "./sections/SectionSeasonality";
import SectionBehavior from "./sections/SectionBehavior";
import SectionPush from "./sections/SectionPush";
import SectionRelations from "./sections/SectionRelations";

export default function ClientBaseAnalytics() {
  // === –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===
  const [filters, setFilters] = useState({
    city: "–í—Å–µ –≥–æ—Ä–æ–¥–∞",
    segment: "–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã",
    device: "–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    activityDateFrom: "",
    activityDateTo: "",
    search: "",
  });

  const [activeTab, setActiveTab] = useState("overview");
  const [lastUpdated, setLastUpdated] = useState("‚Äî");

  // --- –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ---
  const [filteredOverview, setFilteredOverview] = useState(overviewData);
  const [filteredBehavior, setFilteredBehavior] = useState(behaviorData);
  const [filteredPush, setFilteredPush] = useState(pushData);
  const [filteredSeasonality, setFilteredSeasonality] = useState(seasonalityData);
  const [filteredRelations, setFilteredRelations] = useState(relationsData);

  // === –≠—Ñ—Ñ–µ–∫—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===
  useEffect(() => {
    setLastUpdated(new Date().toLocaleTimeString("ru-RU"));

    const noFilters =
      filters.city === "–í—Å–µ –≥–æ—Ä–æ–¥–∞" &&
      filters.segment === "–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã" &&
      filters.device === "–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" &&
      !filters.activityDateFrom &&
      !filters.activityDateTo &&
      !filters.search;

    if (noFilters) {
      // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É
      setFilteredOverview(overviewData);
      setFilteredBehavior(behaviorData);
      setFilteredPush(pushData);
      setFilteredSeasonality(seasonalityData);
      setFilteredRelations(relationsData);
      return;
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é ‚Äî –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
    const mockFilter = (data, label) => ({
      ...data,
      meta: {
        ...data.meta,
        filtersApplied: filters,
        filtered: true,
        label,
      },
      insights: [
        `–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ: ${Object.entries(filters)
          .map(([k, v]) => `${k}: ${v}`)
          .join(", ")}`,
        ...(data.insights || []),
      ],
    });

    setFilteredOverview(mockFilter(overviewData, "Overview"));
    setFilteredBehavior(mockFilter(behaviorData, "Behavior"));
    setFilteredPush(mockFilter(pushData, "Push"));
    setFilteredSeasonality(mockFilter(seasonalityData, "Seasonality"));
    setFilteredRelations(mockFilter(relationsData, "Relations"));
  }, [filters]);

  // === –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===
  const handleReset = () => {
    setFilters({
      city: "–í—Å–µ –≥–æ—Ä–æ–¥–∞",
      segment: "–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã",
      device: "–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
      activityDateFrom: "",
      activityDateTo: "",
      search: "",
    });
  };

  // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ===
  const filtersActive = !(
    filters.city === "–í—Å–µ –≥–æ—Ä–æ–¥–∞" &&
    filters.segment === "–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã" &&
    filters.device === "–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" &&
    !filters.activityDateFrom &&
    !filters.activityDateTo &&
    !filters.search
  );

  return (
    <div className="p-6 space-y-6 bg-gray-50 min-h-screen">
      {/* === –ó–∞–≥–æ–ª–æ–≤–æ–∫ === */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-semibold text-gray-800">
            üìä Client Base Analytics
          </h1>
          <p className="text-gray-600 text-sm">
            –ï–¥–∏–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
          </p>
        </div>
        <div className="text-sm text-gray-500 flex items-center gap-1">
          <RefreshCw size={14} className="text-yellow-500" />
          –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdated}
        </div>
      </div>

      {/* === –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ === */}
      <div className="bg-white shadow-sm rounded-xl p-4 border border-gray-100">
        <div className="flex flex-wrap gap-4 items-end">
          {/* üîç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ */}
          <div className="flex flex-col flex-1 min-w-[220px]">
            <label className="text-xs text-gray-500 font-medium mb-1">
              <Search size={12} className="inline mr-1 text-yellow-600" />
              –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            </label>
            <input
              type="text"
              value={filters.search}
              onChange={(e) =>
                setFilters((f) => ({ ...f, search: e.target.value }))
              }
              placeholder="–§–ò–û, –ò–ò–ù, ID, —Å—á—ë—Ç, –ø–æ–ª–∏—Å..."
              className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400"
            />
          </div>

          {/* üèô –ì–æ—Ä–æ–¥ */}
          <div className="flex flex-col">
            <label className="text-xs text-gray-500 mb-1">üèô –ì–æ—Ä–æ–¥</label>
            <select
              value={filters.city}
              onChange={(e) => setFilters({ ...filters, city: e.target.value })}
              className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400"
            >
              <option>–í—Å–µ –≥–æ—Ä–æ–¥–∞</option>
              <option>–ê–ª–º–∞—Ç—ã</option>
              <option>–ê—Å—Ç–∞–Ω–∞</option>
              <option>–®—ã–º–∫–µ–Ω—Ç</option>
            </select>
          </div>

          {/* üìä –°–µ–≥–º–µ–Ω—Ç */}
          <div className="flex flex-col">
            <label className="text-xs text-gray-500 mb-1">üìä –°–µ–≥–º–µ–Ω—Ç</label>
            <select
              value={filters.segment}
              onChange={(e) =>
                setFilters({ ...filters, segment: e.target.value })
              }
              className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400"
            >
              <option>–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã</option>
              <option>–ü—Ä–µ–º–∏—É–º</option>
              <option>–ú–∞—Å—Å–æ–≤—ã–π</option>
              <option>–°–µ–º–µ–π–Ω—ã–π</option>
            </select>
          </div>

          {/* üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ */}
          <div className="flex flex-col">
            <label className="text-xs text-gray-500 mb-1">üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</label>
            <select
              value={filters.device}
              onChange={(e) =>
                setFilters({ ...filters, device: e.target.value })
              }
              className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400"
            >
              <option>–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</option>
              <option>iOS</option>
              <option>Android</option>
              <option>Web</option>
            </select>
          </div>

          {/* üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
          <div className="flex flex-col sm:flex-row items-center gap-2">
            <div className="flex flex-col">
              <label className="text-xs text-gray-500 mb-1">üìÖ –°</label>
              <input
                type="date"
                value={filters.activityDateFrom}
                onChange={(e) =>
                  setFilters({ ...filters, activityDateFrom: e.target.value })
                }
                className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400"
              />
            </div>
            <div className="flex flex-col">
              <label className="text-xs text-gray-500 mb-1">üìÖ –ü–æ</label>
              <input
                type="date"
                value={filters.activityDateTo}
                onChange={(e) =>
                  setFilters({ ...filters, activityDateTo: e.target.value })
                }
                className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400"
              />
            </div>
          </div>

          {/* üîÅ –°–±—Ä–æ—Å */}
          <button
            onClick={handleReset}
            className="ml-auto bg-yellow-500 hover:bg-yellow-600 text-gray-900 px-4 py-2 rounded-md text-sm font-medium transition"
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </button>
        </div>

        {/* üü° –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        {filtersActive && (
          <div className="mt-3 text-sm text-yellow-800 bg-yellow-50 border border-yellow-200 rounded-md p-2">
            –§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã:{" "}
            {Object.entries(filters)
              .filter(([_, v]) => v && !v.includes("–í—Å–µ"))
              .map(([k, v]) => `${k}: ${v}`)
              .join(", ")}
          </div>
        )}
      </div>

      {/* === –í–∫–ª–∞–¥–∫–∏ === */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="flex gap-2 overflow-x-auto bg-white border rounded-lg p-2 shadow-sm">
          <TabsTrigger value="overview">3.1 –û–±–∑–æ—Ä</TabsTrigger>
          <TabsTrigger value="seasonality">3.2 –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å</TabsTrigger>
          <TabsTrigger value="behavior">3.3 –ü–æ–≤–µ–¥–µ–Ω–∏–µ</TabsTrigger>
          <TabsTrigger value="push">3.4 Push-–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="relations">3.5 –°–≤—è–∑–∏</TabsTrigger>
        </TabsList>

        <div className="mt-6">
          <TabsContent value="overview">
            <SectionOverview data={filteredOverview} filters={filters} />
          </TabsContent>

          <TabsContent value="seasonality">
            <SectionSeasonality data={filteredSeasonality} filters={filters} />
          </TabsContent>

          <TabsContent value="behavior">
            <SectionBehavior data={filteredBehavior} filters={filters} />
          </TabsContent>

          <TabsContent value="push">
            <SectionPush data={filteredPush} filters={filters} />
          </TabsContent>

          <TabsContent value="relations">
            <SectionRelations data={filteredRelations} filters={filters} />
          </TabsContent>
        </div>
      </Tabs>
    </div>
  );
}
