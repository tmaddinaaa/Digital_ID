import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { profilesList } from "../data/profilesList";
import Select from "react-select";
import { ChevronDown, ChevronUp, Calendar } from "lucide-react";

const Profiles = () => {
  const navigate = useNavigate();

  const [filterValue, setFilterValue] = useState("");
  const [selectedTags, setSelectedTags] = useState([]);
  const [cityFilter, setCityFilter] = useState("–í—Å–µ");
  const [segmentFilter, setSegmentFilter] = useState("–í—Å–µ");
  const [statusFilter, setStatusFilter] = useState("–í—Å–µ");

  const [dateFromBank, setDateFromBank] = useState("");
  const [dateToBank, setDateToBank] = useState("");
  const [dateFromMP, setDateFromMP] = useState("");
  const [dateToMP, setDateToMP] = useState("");

  const [showDates, setShowDates] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(5);

  // --- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ---
  const allCities = ["–í—Å–µ", ...new Set(profilesList.map((p) => p.city))];
  const allSegments = ["–í—Å–µ", ...new Set(profilesList.map((p) => p.segment))];
  const allTags = Array.from(
    new Set(profilesList.flatMap((p) => p.tags || []))
  ).map((tag) => ({ value: tag, label: tag }));

  // --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
  const filteredProfiles = profilesList.filter((p) => {
    const matchesSearch =
      p.fio.toLowerCase().includes(filterValue.toLowerCase()) ||
      p.iin.toString().includes(filterValue) ||
      p.ac_id.toString().includes(filterValue);

    const matchesTags =
      selectedTags.length === 0 ||
      selectedTags.every((t) => p.tags && p.tags.includes(t.value));

    const matchesCity = cityFilter === "–í—Å–µ" || p.city === cityFilter;
    const matchesSegment = segmentFilter === "–í—Å–µ" || p.segment === segmentFilter;
    const matchesStatus = statusFilter === "–í—Å–µ" || p.status === statusFilter;

    const matchesDateBank =
      (!dateFromBank && !dateToBank) ||
      ((p.registrationDate || "").localeCompare(dateFromBank) >= 0 &&
        (p.registrationDate || "").localeCompare(dateToBank) <= 0);

    const matchesDateMP =
      (!dateFromMP && !dateToMP) ||
      ((p.mobileAppRegistrationDate || "").localeCompare(dateFromMP) >= 0 &&
        (p.mobileAppRegistrationDate || "").localeCompare(dateToMP) <= 0);

    return (
      matchesSearch &&
      matchesTags &&
      matchesCity &&
      matchesSegment &&
      matchesStatus &&
      matchesDateBank &&
      matchesDateMP
    );
  });

  // --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
  const totalPages = Math.ceil(filteredProfiles.length / pageSize);
  const paginatedProfiles = filteredProfiles.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  const handleReset = () => {
    setFilterValue("");
    setSelectedTags([]);
    setCityFilter("–í—Å–µ");
    setSegmentFilter("–í—Å–µ");
    setStatusFilter("–í—Å–µ");
    setDateFromBank("");
    setDateToBank("");
    setDateFromMP("");
    setDateToMP("");
    setCurrentPage(1);
  };

  const handlePrev = () => setCurrentPage((p) => Math.max(p - 1, 1));
  const handleNext = () => setCurrentPage((p) => Math.min(p + 1, totalPages));

  const dateFilterActive =
    dateFromBank || dateToBank || dateFromMP || dateToMP;

  return (
    <div className="flex h-screen bg-gray-50 text-gray-900">
      <div className="flex-1 p-6 overflow-auto">
        <h1 className="text-2xl font-semibold mb-4">Client 360</h1>

        {/* üéõÔ∏è –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        <div className="bg-white p-5 rounded-xl shadow-sm border border-gray-100 mb-6 space-y-4">
          {/* üîç –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ */}
          <div className="flex flex-wrap gap-4">
            <div className="flex flex-col flex-1 min-w-[240px]">
              <label className="text-xs font-semibold text-gray-500 mb-1">
                üîç –ü–æ–∏—Å–∫
              </label>
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û, –ò–ò–ù –∏–ª–∏ AC_ID..."
                value={filterValue}
                onChange={(e) => setFilterValue(e.target.value)}
                className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
              />
            </div>

            {/* üè∑ –¢–µ–≥–∏ */}
            <div className="flex flex-col min-w-[250px]">
              <label className="text-xs font-semibold text-gray-500 mb-1">
                üè∑ –¢–µ–≥–∏
              </label>
              <Select
                isMulti
                options={allTags}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏..."
                value={selectedTags}
                onChange={(selected) => setSelectedTags(selected || [])}
                className="text-sm"
                styles={{
                  control: (base) => ({
                    ...base,
                    borderColor: "#d1d5db",
                    borderRadius: "0.375rem",
                    boxShadow: "none",
                    "&:hover": { borderColor: "#facc15" },
                  }),
                }}
              />
            </div>

            {/* üèô –ì–æ—Ä–æ–¥ */}
            <div className="flex flex-col">
              <label className="text-xs font-semibold text-gray-500 mb-1">
                üèô –ì–æ—Ä–æ–¥
              </label>
              <select
                value={cityFilter}
                onChange={(e) => setCityFilter(e.target.value)}
                className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
              >
                {allCities.map((c) => (
                  <option key={c}>{c}</option>
                ))}
              </select>
            </div>

            {/* üìä –°–µ–≥–º–µ–Ω—Ç */}
            <div className="flex flex-col">
              <label className="text-xs font-semibold text-gray-500 mb-1">
                üìä –°–µ–≥–º–µ–Ω—Ç
              </label>
              <select
                value={segmentFilter}
                onChange={(e) => setSegmentFilter(e.target.value)}
                className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
              >
                {allSegments.map((s) => (
                  <option key={s}>{s}</option>
                ))}
              </select>
            </div>

            {/* ‚öôÔ∏è –°—Ç–∞—Ç—É—Å */}
            <div className="flex flex-col">
              <label className="text-xs font-semibold text-gray-500 mb-1">
                ‚öôÔ∏è –°—Ç–∞—Ç—É—Å
              </label>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
              >
                <option>–í—Å–µ</option>
                <option>–ê–∫—Ç–∏–≤–µ–Ω</option>
                <option>–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
              </select>
            </div>

            {/* –°–±—Ä–æ—Å */}
            <div className="flex items-end">
              <button
                onClick={handleReset}
                className="bg-yellow-500 hover:bg-yellow-600 text-gray-900 px-4 py-2 rounded-md text-sm font-medium transition"
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>
          </div>

          {/* üìÖ Collapsible —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
          <div className="mt-3 border-t border-gray-200 pt-3">
            <button
              onClick={() => setShowDates((prev) => !prev)}
              className={`flex items-center gap-2 text-sm font-semibold transition ${
                dateFilterActive
                  ? "text-yellow-600"
                  : "text-gray-700 hover:text-yellow-600"
              }`}
            >
              <Calendar className="w-4 h-4" />
              –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
              {showDates ? (
                <ChevronUp className="w-4 h-4" />
              ) : (
                <ChevronDown className="w-4 h-4" />
              )}
            </button>

            {showDates && (
              <div className="mt-4 flex flex-wrap items-end gap-6 text-sm">
                {/* üè¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–∞–Ω–∫–µ */}
                <div className="flex items-center gap-2 border border-gray-200 rounded-lg px-3 py-2 bg-gray-50">
                  <span className="font-semibold text-gray-600 whitespace-nowrap">
                    üè¶ –ë–∞–Ω–∫:
                  </span>
                  <input
                    type="date"
                    value={dateFromBank}
                    onChange={(e) => setDateFromBank(e.target.value)}
                    className="border border-gray-300 rounded-md px-2 py-1 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
                  />
                  <span className="text-gray-500">‚Äì</span>
                  <input
                    type="date"
                    value={dateToBank}
                    onChange={(e) => setDateToBank(e.target.value)}
                    className="border border-gray-300 rounded-md px-2 py-1 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
                  />
                </div>

                {/* üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ */}
                <div className="flex items-center gap-2 border border-gray-200 rounded-lg px-3 py-2 bg-gray-50">
                  <span className="font-semibold text-gray-600 whitespace-nowrap">
                    üì± –ú–ü:
                  </span>
                  <input
                    type="date"
                    value={dateFromMP}
                    onChange={(e) => setDateFromMP(e.target.value)}
                    className="border border-gray-300 rounded-md px-2 py-1 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
                  />
                  <span className="text-gray-500">‚Äì</span>
                  <input
                    type="date"
                    value={dateToMP}
                    onChange={(e) => setDateToMP(e.target.value)}
                    className="border border-gray-300 rounded-md px-2 py-1 text-sm focus:ring-2 focus:ring-yellow-400 hover:border-yellow-300 transition"
                  />
                </div>
              </div>
            )}
          </div>
        </div>

        {/* üìã –¢–∞–±–ª–∏—Ü–∞ */}
        <div className="overflow-x-auto bg-white shadow rounded-xl">
          <table className="min-w-full border-collapse text-gray-700">
            <thead className="bg-yellow-50 text-yellow-700">
              <tr>
                <th className="p-3 text-left">AC ID</th>
                <th className="p-3 text-left">–§–ò–û</th>
                <th className="p-3 text-left">–ò–ò–ù</th>
                <th className="p-3 text-left">–ì–æ—Ä–æ–¥</th>
                <th className="p-3 text-left">–°–µ–≥–º–µ–Ω—Ç</th>
                <th className="p-3 text-left">–°—Ç–∞—Ç—É—Å</th>
                <th className="p-3 text-left">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–±–∞–Ω–∫)</th>
                <th className="p-3 text-left">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ú–ü)</th>
                <th className="p-3 text-left">–¢–µ–≥–∏</th>
              </tr>
            </thead>
            <tbody>
              {paginatedProfiles.map((p) => (
                <tr
                  key={p.ac_id}
                  className="border-t hover:bg-yellow-100 cursor-pointer transition-colors"
                  onClick={() => navigate(`/profiles/${p.ac_id}`)}
                >
                  <td className="p-3 font-mono">{p.ac_id}</td>
                  <td className="p-3">{p.fio}</td>
                  <td className="p-3 font-mono">{p.iin}</td>
                  <td className="p-3">{p.city}</td>
                  <td className="p-3">{p.segment}</td>
                  <td
                    className={`p-3 font-medium ${
                      p.status === "–ê–∫—Ç–∏–≤–µ–Ω"
                        ? "text-green-600"
                        : "text-red-500"
                    }`}
                  >
                    {p.status}
                  </td>
                  <td className="p-3">{p.registrationDate || "‚Äî"}</td>
                  <td className="p-3">{p.mobileAppRegistrationDate || "‚Äî"}</td>
                  <td className="p-3">
                    {p.tags?.length
                      ? p.tags.map((t) => (
                          <span
                            key={t}
                            className="bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded-full text-xs font-medium mr-1"
                          >
                            {t}
                          </span>
                        ))
                      : "‚Äî"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Profiles;
